name: Validate OpenAPI specification

on:
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  issues: write

jobs:
  validate:
    name: Check generated spec
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check out pull request head
        run: |
          git fetch origin pull/${{ github.event.pull_request.number }}/head:pr
          git checkout pr

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Generate OpenAPI document
        env:
          GITHUB_TOKEN: ""
        run: go run ./cmd/openapi -output cmd/api/openapi.json

      - name: Detect changes
        id: diff
        run: |
          if git diff --quiet -- cmd/api/openapi.json; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
            git diff -- cmd/api/openapi.json > openapi.diff
          fi

      - name: Comment on pull request
        if: steps.diff.outputs.changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const marker = '<!-- openapi-drift -->';
            const body = `${marker}
The generated OpenAPI document does not match the committed version.

Run go run ./cmd/openapi -output cmd/api/openapi.json and commit the result, or comment "generate openapi spec" to have CI update it for you.`;
            const prNumber = context.payload.pull_request.number;
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              per_page: 100,
            });
            const existing = comments.find(comment => comment.body && comment.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body,
              });
            }

      - name: Fail when spec is stale
        if: steps.diff.outputs.changed == 'true'
        run: |
          echo "OpenAPI spec is out of date"
          exit 1
